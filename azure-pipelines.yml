strategy:
  matrix:
    # Nim requires enforcing ARCH="x86" and ucpu
    # for 32-bit target as it seems like the machine is 64-bit
    # Weave only works on devel and Unix platforms at the moment
    # Windows_stable_32bit:
    #   VM: 'windows-latest'
    #   ARCH: x86
    #   ucpu: i686
    #   PLATFORM: x86
    #   CHANNEL: stable
    #   WEAVE_TEST_LANG: c
    # Windows_stable_64bit:
    #   VM: 'windows-latest'
    #   PLATFORM: x64
    #   CHANNEL: stable
    #   WEAVE_TEST_LANG: c
    # Windows_devel_32bit:
    #   VM: 'windows-latest'
    #   ARCH: x86
    #   ucpu: i686
    #   PLATFORM: x86
    #   CHANNEL: devel
    #   WEAVE_TEST_LANG: c
    # Windows_devel_bit:
    #   VM: 'windows-latest'
    #   PLATFORM: x64
    #   CHANNEL: devel
    #   WEAVE_TEST_LANG: c
    Linux_devel_64bit:
      VM: 'ubuntu-16.04'
      PLATFORM: x64
      CHANNEL: devel
      WEAVE_TEST_LANG: c
    Linux_cpp_devel_64bit:
      VM: 'ubuntu-16.04'
      PLATFORM: x64
      CHANNEL: devel
      WEAVE_TEST_LANG: cpp
    Linux_devel_32bit:
      VM: 'ubuntu-16.04'
      PLATFORM: x86
      ucpu: i686
      CHANNEL: devel
      WEAVE_TEST_LANG: c

pool:
  vmImage: $(VM)

steps:
  - task: CacheBeta@1
    displayName: 'cache Nim binaries'
    inputs:
      key: NimBinaries | $(Agent.OS) | $(CHANNEL) | $(PLATFORM)
      path: NimBinaries

  - task: CacheBeta@1
    displayName: 'cache MinGW-w64'
    inputs:
      key: mingwCache | 8_1_0 | $(PLATFORM)
      path: mingwCache
    condition: eq(variables['Agent.OS'], 'Windows_NT')

  - powershell: |
      Set-ItemProperty -Path 'HKLM:\SYSTEM\CurrentControlSet\Control\FileSystem' -Name 'LongPathsEnabled' -Value 1
    displayName: 'long path support'
    condition: eq(variables['Agent.OS'], 'Windows_NT')
  - bash: |
      set -e
      echo "Installing MinGW-w64"
      if [[ $PLATFORM == "x86" ]]; then
        MINGW_FILE="i686-8.1.0-release-posix-dwarf-rt_v6-rev0.7z"
        MINGW_URL="https://sourceforge.net/projects/mingw-w64/files/Toolchains%20targetting%20Win32/Personal%20Builds/mingw-builds/8.1.0/threads-posix/dwarf/${MINGW_FILE}"
        MINGW_DIR="mingw32"
      else
        MINGW_FILE="x86_64-8.1.0-release-posix-seh-rt_v6-rev0.7z"
        MINGW_URL="https://sourceforge.net/projects/mingw-w64/files/Toolchains%20targetting%20Win64/Personal%20Builds/mingw-builds/8.1.0/threads-posix/seh/${MINGW_FILE}"
        MINGW_DIR="mingw64"
      fi
      mkdir -p mingwCache
      pushd mingwCache
      if [[ ! -e "$MINGW_FILE" ]]; then
        rm -f *.7z
        curl -OLsS "$MINGW_URL"
      fi
      7z x -y -bd "$MINGW_FILE" >/dev/null
      mkdir -p /c/custom
      mv "$MINGW_DIR" /c/custom/
      popd
      export PATH="/c/custom/${MINGW_DIR}/bin:$PATH"
      echo "##vso[task.setvariable variable=PATH;]$PATH"
    displayName: 'Install dependencies (Windows)'
    condition: eq(variables['Agent.OS'], 'Windows_NT')

  - bash: |
      export ncpu=
      case '$(Agent.OS)' in
      'Linux')
        ncpu=$(nproc)
        ;;
      'Darwin')
        ncpu=$(sysctl -n hw.ncpu)
        ;;
      'Windows_NT')
        ncpu=$NUMBER_OF_PROCESSORS
        ;;
      esac
      [[ -z "$ncpu" || $ncpu -le 0 ]] && ncpu=1
      echo "Found ${ncpu} cores"
      echo "##vso[task.setvariable variable=ncpu;]${ncpu}"
    displayName: 'Detecting number of cores'

  - bash: |
      if [ "${CHANNEL}" = stable ]; then
        BRANCH="v$(curl https://nim-lang.org/channels/stable)"
      else
        BRANCH="${CHANNEL}"
      fi
      mkdir -p NimBinaries
      pushd NimBinaries
      if [ ! -x "nim-${CHANNEL}/bin/nim" ]; then
        git clone -b "${BRANCH}" https://github.com/nim-lang/nim "nim-${CHANNEL}/"
        pushd "nim-${CHANNEL}"
        git clone --depth 1 https://github.com/nim-lang/csources csources/
        pushd csources

        make -j $ncpu CC=gcc
        popd
        rm -rf csources
        bin/nim c koch
        ./koch boot -d:release
        ./koch tools
      else
        pushd "nim-${CHANNEL}"
        git fetch origin "${BRANCH}"
        if ! git merge FETCH_HEAD | grep "Already up.to.date"; then
          bin/nim c koch
          ./koch boot -d:release
          ./koch tools
        fi
      fi
      popd # exit nim-CHANNEL
      popd # exit NimBinaries
      export PATH="NimBinaries/nim-${CHANNEL}/bin${PATH:+:$PATH}"
      echo "##vso[task.setvariable variable=PATH;]$PATH"
    displayName: 'Building Nim'

  - bash: |
      nimble refresh
      nimble install cligen || true
    displayName: 'Building the package dependencies'

  - bash: |
      nimble test
    displayName: 'Testing the package'
