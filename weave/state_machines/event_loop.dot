digraph workerEventLoop{
    splines=ortho;
    node [shape = doublecircle]; InitialState WEL_Exit;
    node [shape = circle, fontcolor=white, fillcolor=darkslategrey, style="filled"]; WEL_CheckTask WEL_OutOfTasks WEL_CheckTermination WEL_SuccessfulTheft;
    InitialState -> WEL_CheckTermination [color="black:invis:black", xlabel="entry point"];
    node [shape = octagon, fontcolor=black, fillcolor=lightsteelblue, style="rounded,filled"]; WEL_CheckTask_EV_FoundTask WEL_OutOfTasks_EV_StoleTask WEL_CheckTermination_EV_SignaledTerminate ;
    WEL_CheckTask_EV_FoundTask [label="EV_FoundTask\nnot isNil(task)"];
    WEL_OutOfTasks_EV_StoleTask [label="EV_StoleTask\nstoleTask"];
    WEL_CheckTermination_EV_SignaledTerminate [label="EV_SignaledTerminate\nworkerContext.signaledTerminate"];
    WEL_CheckTask -> WEL_CheckTask_EV_FoundTask[style=bold, xlabel="always"];
    WEL_CheckTask_EV_FoundTask -> WEL_CheckTask [style=dashed, xlabel="true"];
    WEL_CheckTask_EV_FoundTask -> WEL_OutOfTasks [xlabel="default"];
    WEL_OutOfTasks -> WEL_OutOfTasks_EV_StoleTask[style=bold, xlabel="always"];
    WEL_OutOfTasks_EV_StoleTask -> WEL_SuccessfulTheft [style=dashed, xlabel="true"];
    WEL_OutOfTasks_EV_StoleTask -> WEL_OutOfTasks [xlabel="default"];
    WEL_CheckTermination -> WEL_CheckTermination_EV_SignaledTerminate[style=bold, xlabel="always"];
    WEL_CheckTermination_EV_SignaledTerminate -> WEL_Exit [style=dashed, xlabel="true"];
    WEL_CheckTermination_EV_SignaledTerminate -> WEL_CheckTask [xlabel="default"];
    WEL_SuccessfulTheft -> WEL_CheckTermination [xlabel="default"];
}